{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\LNT_Training\\\\MERN Stack\\\\ReactJS\\\\web_portalFinal\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nReactDOM.render( /*#__PURE__*/_jsxDEV(BrowserRouter, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\nvar links = document.querySelectorAll('.smoothScroll');\nconst transitionSpeed = 10; //transition intervals (ms)\n\nconst initialSpeed = 20; //initial speed (px)\n\nconst acceleration = 0.15; //transition acceleration (px)\n\nconst offset = 10; //offset so the element is not totally in the border (px)\n//const = HTMLMenuElement.height;\n\nlinks.forEach(link => link.addEventListener('click', function (e) {\n  //Prevent Default Behaviour\n  e.preventDefault();\n  e.stopPropagation(); //declare the objective element\n\n  var goingTo;\n  var hrefID = link.getAttribute('href'); //In case the # is entered\n\n  if (hrefID === '#') {\n    goingTo = document.body;\n  } else {\n    goingTo = document.querySelector(hrefID);\n  } // var distance = goingTo.offsetTop - link.offsetTop;\n\n\n  var totalTraveled = 0;\n\n  if (link.offsetTop > goingTo.offsetTop) {\n    //IF GOING UP\n    let speed = -initialSpeed;\n    let distance = goingTo.offsetTop - window.scrollY + offset;\n    console.log('Going up by ' + distance + 'px'); //Start intervals movement\n\n    let interval = setInterval(function () {\n      window.scrollBy(0, speed);\n      totalTraveled += speed;\n      speed = Math.round(speed - acceleration); //In case it goes over it will make a small jump to fix it\n\n      if (totalTraveled <= distance) {\n        window.scrollBy(0, totalTraveled - distance);\n        console.log('Fixing distance by ' + (totalTraveled - distance));\n        clearInterval(interval);\n      }\n    }, transitionSpeed);\n  } else {\n    //IF GOING DOWN\n    let distance = goingTo.offsetTop - window.scrollY - offset;\n    let speed = initialSpeed;\n    console.log('Going down by ' + distance + 'px'); //Start intervals movement\n\n    let interval = setInterval(function () {\n      window.scrollBy(0, speed);\n      totalTraveled += speed;\n      speed = Math.round(speed + acceleration); //In case it goes over it will make a small jump to fix it\n\n      if (totalTraveled >= distance) {\n        window.scrollBy(0, -(totalTraveled - distance));\n        clearInterval(interval);\n      }\n    }, transitionSpeed);\n  }\n}));","map":{"version":3,"sources":["F:/LNT_Training/MERN Stack/ReactJS/web_portalFinal/src/index.js"],"names":["React","ReactDOM","App","reportWebVitals","BrowserRouter","render","document","getElementById","links","querySelectorAll","transitionSpeed","initialSpeed","acceleration","offset","forEach","link","addEventListener","e","preventDefault","stopPropagation","goingTo","hrefID","getAttribute","body","querySelector","totalTraveled","offsetTop","speed","distance","window","scrollY","console","log","interval","setInterval","scrollBy","Math","round","clearInterval"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,aAAT,QAA8C,kBAA9C;AAEAH,QAAQ,CAACI,MAAT,eACE,QAAC,aAAD;AAAA,yBAGE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,QADF,EAMEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF,E,CASA;AACA;AACA;;AACAJ,eAAe;AACf,IAAIK,KAAK,GAAGF,QAAQ,CAACG,gBAAT,CAA0B,eAA1B,CAAZ;AACA,MAAMC,eAAe,GAAG,EAAxB,C,CAA4B;;AAC5B,MAAMC,YAAY,GAAG,EAArB,C,CAAyB;;AACzB,MAAMC,YAAY,GAAG,IAArB,C,CAA2B;;AAC3B,MAAMC,MAAM,GAAG,EAAf,C,CAAmB;AACnB;;AAEAL,KAAK,CAACM,OAAN,CAAcC,IAAI,IAChBA,IAAI,CAACC,gBAAL,CAAsB,OAAtB,EAA+B,UAASC,CAAT,EAAY;AACzC;AACAA,EAAAA,CAAC,CAACC,cAAF;AACAD,EAAAA,CAAC,CAACE,eAAF,GAHyC,CAKzC;;AACA,MAAIC,OAAJ;AACA,MAAIC,MAAM,GAAGN,IAAI,CAACO,YAAL,CAAkB,MAAlB,CAAb,CAPyC,CASzC;;AACA,MAAID,MAAM,KAAK,GAAf,EAAoB;AAClBD,IAAAA,OAAO,GAAGd,QAAQ,CAACiB,IAAnB;AACD,GAFD,MAEO;AACLH,IAAAA,OAAO,GAAGd,QAAQ,CAACkB,aAAT,CAAuBH,MAAvB,CAAV;AACD,GAdwC,CAgBzC;;;AAEA,MAAII,aAAa,GAAG,CAApB;;AAEA,MAAIV,IAAI,CAACW,SAAL,GAAiBN,OAAO,CAACM,SAA7B,EAAwC;AACtC;AACA,QAAIC,KAAK,GAAG,CAAChB,YAAb;AACA,QAAIiB,QAAQ,GAAGR,OAAO,CAACM,SAAR,GAAoBG,MAAM,CAACC,OAA3B,GAAqCjB,MAApD;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBJ,QAAjB,GAA4B,IAAxC,EAJsC,CAMtC;;AACA,QAAIK,QAAQ,GAAGC,WAAW,CAAC,YAAW;AACpCL,MAAAA,MAAM,CAACM,QAAP,CAAgB,CAAhB,EAAmBR,KAAnB;AACAF,MAAAA,aAAa,IAAIE,KAAjB;AACAA,MAAAA,KAAK,GAAGS,IAAI,CAACC,KAAL,CAAWV,KAAK,GAAGf,YAAnB,CAAR,CAHoC,CAKpC;;AACA,UAAIa,aAAa,IAAIG,QAArB,EAA+B;AAC7BC,QAAAA,MAAM,CAACM,QAAP,CAAgB,CAAhB,EAAmBV,aAAa,GAAGG,QAAnC;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBP,aAAa,GAAGG,QAAzC,CAAZ;AACAU,QAAAA,aAAa,CAACL,QAAD,CAAb;AACD;AACF,KAXyB,EAWvBvB,eAXuB,CAA1B;AAYD,GAnBD,MAmBO;AACL;AACA,QAAIkB,QAAQ,GAAGR,OAAO,CAACM,SAAR,GAAoBG,MAAM,CAACC,OAA3B,GAAqCjB,MAApD;AACA,QAAIc,KAAK,GAAGhB,YAAZ;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBJ,QAAnB,GAA8B,IAA1C,EAJK,CAML;;AACA,QAAIK,QAAQ,GAAGC,WAAW,CAAC,YAAW;AACpCL,MAAAA,MAAM,CAACM,QAAP,CAAgB,CAAhB,EAAmBR,KAAnB;AACAF,MAAAA,aAAa,IAAIE,KAAjB;AACAA,MAAAA,KAAK,GAAGS,IAAI,CAACC,KAAL,CAAWV,KAAK,GAAGf,YAAnB,CAAR,CAHoC,CAKpC;;AACA,UAAIa,aAAa,IAAIG,QAArB,EAA+B;AAC7BC,QAAAA,MAAM,CAACM,QAAP,CAAgB,CAAhB,EAAmB,EAAEV,aAAa,GAAGG,QAAlB,CAAnB;AACAU,QAAAA,aAAa,CAACL,QAAD,CAAb;AACD;AACF,KAVyB,EAUvBvB,eAVuB,CAA1B;AAWD;AACF,CA1DD,CADF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    \n   \n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nvar links = document.querySelectorAll('.smoothScroll');\nconst transitionSpeed = 10; //transition intervals (ms)\nconst initialSpeed = 20; //initial speed (px)\nconst acceleration = 0.15; //transition acceleration (px)\nconst offset = 10; //offset so the element is not totally in the border (px)\n//const = HTMLMenuElement.height;\n\nlinks.forEach(link =>\n  link.addEventListener('click', function(e) {\n    //Prevent Default Behaviour\n    e.preventDefault();\n    e.stopPropagation();\n\n    //declare the objective element\n    var goingTo;\n    var hrefID = link.getAttribute('href');\n\n    //In case the # is entered\n    if (hrefID === '#') {\n      goingTo = document.body;\n    } else {\n      goingTo = document.querySelector(hrefID);\n    }\n\n    // var distance = goingTo.offsetTop - link.offsetTop;\n\n    var totalTraveled = 0;\n\n    if (link.offsetTop > goingTo.offsetTop) {\n      //IF GOING UP\n      let speed = -initialSpeed;\n      let distance = goingTo.offsetTop - window.scrollY + offset;\n      console.log('Going up by ' + distance + 'px');\n\n      //Start intervals movement\n      let interval = setInterval(function() {\n        window.scrollBy(0, speed);\n        totalTraveled += speed;\n        speed = Math.round(speed - acceleration);\n\n        //In case it goes over it will make a small jump to fix it\n        if (totalTraveled <= distance) {\n          window.scrollBy(0, totalTraveled - distance);\n          console.log('Fixing distance by ' + (totalTraveled - distance));\n          clearInterval(interval);\n        }\n      }, transitionSpeed);\n    } else {\n      //IF GOING DOWN\n      let distance = goingTo.offsetTop - window.scrollY - offset;\n      let speed = initialSpeed;\n      console.log('Going down by ' + distance + 'px');\n\n      //Start intervals movement\n      let interval = setInterval(function() {\n        window.scrollBy(0, speed);\n        totalTraveled += speed;\n        speed = Math.round(speed + acceleration);\n\n        //In case it goes over it will make a small jump to fix it\n        if (totalTraveled >= distance) {\n          window.scrollBy(0, -(totalTraveled - distance));\n          clearInterval(interval);\n        }\n      }, transitionSpeed);\n    }\n  })\n);\n"]},"metadata":{},"sourceType":"module"}